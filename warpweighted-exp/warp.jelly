;; -*- mode: scheme; -*-
(let ((vertex positions-start)
      (warp-end 0)
      (warp-position (vector 0 0 0))
      (v 0)
      (weft-t 0)
      (draft-pos 0)
      (draft-size 5)
      (draft 0) (d-01 0) (d-02 0) (d-03 0) (d-04 0)
      (d-05 0) (d-06 0) (d-07 0) (d-08 0) (d-09 0) 
      (d-10 0) (d-11 0) (d-12 0) (d-13 0) (d-14 0) 
      (d-15 0) (d-16 0) (d-17 0) (d-18 0) (d-19 0) 
      (d-20 0) (d-21 0) (d-22 0) (d-23 0) (d-24 0) 
      (d-25 0) (d-26 0) (d-27 0) (d-28 0) (d-29 0)
      (d-30 0) (d-31 0) (d-32 0) (d-33 0) (d-34 0) 
      (d-35 0) (d-36 0) (d-37 0) (d-38 0) (d-39 0) 
      (d-40 0) (d-41 0) (d-42 0) (d-43 0) (d-44 0) 
      (d-45 0) (d-46 0) (d-47 0) (d-48 0) (d-49 0) 
      (d-50 0) (d-51 0) (d-52 0) (d-53 0) (d-54 0) 
      (d-55 0) (d-56 0) (d-57 0) (d-58 0) (d-59 0) 
      (d-60 0) (d-61 0) (d-62 0) (d-63 0)
      (last-t 0))
  
      ;;(trace (addr draft-size))

      (define build-quad
        (lambda (tl size)
          (write! vertex
                  tl (+ tl size)
                  (+ tl (*v size (vector 1 0 0)))
                  tl (+ tl size)
                  (+ tl (*v size (vector 0 1 0))))
          (set! vertex (+ vertex 6))))

      ;; like weft but don't need to take account of direction
      (define read-draft
        (lambda ()
          (read (+ (addr draft)
                   (+ (* draft-pos draft-size)
                      (modulo (+ warp-end 1)
                              (+ draft-size (vector 0 1 1)) ))))))

      (define animate-shed
        (lambda (i)
          (set! v (if (< weft-t 0.2)
                      (vector 0 0 0.1)
                      (if (> weft-t 0.8)
                          (vector 0 0 -0.1)
                          (vector 0 0 0))))
          (set! warp-end 0)
          (loop (< warp-end 20)
                (when (< (read-draft) 0.5)
                      (write-add! (- i 6) 0 v 0 0 v v
                                  v 0 v v))
                (set! i (+ i 24))
                (set! warp-end (+ warp-end 1)))))

      (define build-warp
        (lambda ()
          (set! vertex positions-start)
          ;; build 4 segments X warp-ends
          (set! warp-end 0)
          (loop (< warp-end 20)
                (set! warp-position (+ (vector -19 -35.5 0)
                                       (* (vector 2 0 0) warp-end)))
                (build-quad warp-position (vector 1.3 35 0))
                (build-quad (+ warp-position (vector 0 35 0)) (vector 1.3 10 0))
                (build-quad (+ warp-position (vector 0 45 0)) (vector 1.3 15 0))
                (build-quad (+ warp-position (vector 0 60 0)) (vector 1.3 25 0))
                (set! warp-end (+ warp-end 1)))))

      (build-warp)
      (forever
       (set! vertex (+ positions-start 12))

       (when (> last-t weft-t)
             (build-warp))
       (set! last-t weft-t)

       (when (< weft-t 1)
             (animate-shed vertex)
             (set! weft-t (+ weft-t 0.007)))

       ))
